using Coravel;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Serilog;
using VulnerabilityMonitoring.Authentication;
using VulnerabilityMonitoring.Models;
using VulnerabilityMonitoring.Models.Config;
using VulnerabilityMonitoring.Models.Identity;
using VulnerabilityMonitoring.Services.Account;
using VulnerabilityMonitoring.Services.API;
using VulnerabilityMonitoring.Services.Application;
using VulnerabilityMonitoring.Services.Email;
using VulnerabilityMonitoring.Services.Notification;
using VulnerabilityMonitoring.Services.Scan;
using VulnerabilityMonitoring.Services.Schedule;

var builder = WebApplication.CreateBuilder(args);

#region Configure Serilog
builder.Host.UseSerilog((context, configuration) => configuration
    .ReadFrom.Configuration(context.Configuration));
#endregion

#region Add services to the container
builder.Services.AddControllersWithViews();
#endregion

#region Register application services
builder.Services.AddScoped<BasicAuth>();
builder.Services.AddTransient<IAzureDevOpsService, AzureDevOpsService>();
builder.Services.AddScoped<IVulnerabilityScanService, VulnerabilityScanService>();
builder.Services.AddScoped<IProjectManagementService, ProjectManagementService>();
builder.Services.AddScoped<IAccountService, AccountService>();
builder.Services.AddScoped<IProfileService, ProfileService>();
#endregion

#region Configure database contexts
builder.Services.AddDbContext<DataContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
builder.Services.AddDbContext<IdentityContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("IdentityConnection")));
#endregion

#region Configure Identity
builder.Services.AddIdentity<IdentityUser, IdentityRole>(options =>
{
    options.Password.RequiredLength = 4;
    options.User.RequireUniqueEmail = true;
    options.SignIn.RequireConfirmedAccount = false;
})
.AddEntityFrameworkStores<IdentityContext>()
.AddDefaultTokenProviders();
#endregion

#region Configure application cookies
builder.Services.ConfigureApplicationCookie(options =>
{
    options.LoginPath = "/Account/Login";
    options.AccessDeniedPath = "/Account/AccessDenied";
});
#endregion

#region Register user claims principal factory
builder.Services.AddScoped<IUserClaimsPrincipalFactory<IdentityUser>, AppUserClaims>();
#endregion

#region Register email services
builder.Services.AddTransient<IEmailSender<IdentityUser>, EmailSender>();
builder.Services.AddTransient<ISendEmail, SendEmail>();
builder.Services.Configure<EmailSettings>(builder.Configuration.GetSection("EmailSettings"));
#endregion

#region Schedule the vulnerability scan
builder.Services.AddScheduler();
builder.Services.AddTransient<ScheduleJob>();
#endregion

#region Configure SignalR
builder.Services.AddSignalR(options => options.EnableDetailedErrors = true);
builder.Services.AddScoped<NotificationHub>();
#endregion

#region Configure CORS
var corsSettings = builder.Configuration.GetSection("CorsSettings").Get<CorsSettings>();
if (corsSettings == null || string.IsNullOrEmpty(corsSettings.AllowedOrigins[0]))
{
    Serilog.Log.Error("CorsSettings not found in configuration.");
    throw new Exception("CorsSettings not found in configuration.");
}
builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(builder =>
    {
        builder.WithOrigins(corsSettings.AllowedOrigins)
               .WithMethods(corsSettings.AllowedMethods)
               .WithHeaders(corsSettings.AllowedHeaders);
    });
});
#endregion


var app = builder.Build();

#region Configure Serilog request logging
app.UseSerilogRequestLogging();
#endregion

#region Configure the HTTP request pipeline
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseStatusCodePagesWithRedirects("/Home/Error?statusCode={0}");
app.UseHttpsRedirection();
app.UseStaticFiles();
#endregion

#region Schedule jobs
app.Services.UseScheduler(scheduler =>
{
    scheduler.Schedule<ScheduleJob>().Monthly();
});
#endregion

#region Enable CORS for all origins, methods, and headers
app.UseCors();
#endregion

app.UseRouting();
app.UseAuthorization();

#region Map routes and hubs
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
app.MapHub<NotificationHub>("/notificationHub");
#endregion

app.Run();
