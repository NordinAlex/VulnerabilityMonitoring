using Coravel;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.EntityFrameworkCore;
using Serilog;
using VulnerabilityMonitoring.Authentication;
using VulnerabilityMonitoring.Models;
using VulnerabilityMonitoring.Models.Config;
using VulnerabilityMonitoring.Models.Identity;
using VulnerabilityMonitoring.Services.Account;
using VulnerabilityMonitoring.Services.API;
using VulnerabilityMonitoring.Services.Application;
using VulnerabilityMonitoring.Services.Email;
using VulnerabilityMonitoring.Services.Notification;
using VulnerabilityMonitoring.Services.Scan;
using VulnerabilityMonitoring.Services.Schedule;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Host.UseSerilog((context, configuration) => configuration
        .WriteTo.Console()
        .ReadFrom.Configuration(context.Configuration));

builder.Services.AddControllersWithViews();


// services
builder.Services.AddScoped<BasicAuth>();
builder.Services.AddTransient<IAzureDevOpsService, AzureDevOpsService>();
builder.Services.AddScoped<IVulnerabilityScanService, VulnerabilityScanService>();
builder.Services.AddScoped<IProjectManagementService, ProjectManagementService>();
builder.Services.AddScoped<IAccountService, AccountService>();
builder.Services.AddScoped<IProfileService, ProfileService>();
// Database
builder.Services.AddDbContext<DataContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});
builder.Services.AddDbContext<IdentityContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("IdentityConnection"));
});

// Add Identity
builder.Services.AddIdentity<IdentityUser, IdentityRole>(x =>
{
    x.Password.RequiredLength = 4;
    x.User.RequireUniqueEmail = true;
    x.SignIn.RequireConfirmedAccount = false;

}).AddEntityFrameworkStores<IdentityContext>();
builder.Services.ConfigureApplicationCookie(x =>
{
    x.LoginPath = "/Account/Login";
    x.AccessDeniedPath = "/Account/AccessDenied";
    //x.LogoutPath = "/Account/Logout";
    //x.Cookie.Name = "VulnerabilityMonitoring";
    //x.Cookie.HttpOnly = true;
    //x.ExpireTimeSpan = TimeSpan.FromMinutes(60);
    //x.SlidingExpiration = true;
    //x.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.Strict;
    //x.Cookie.SecurePolicy = Microsoft.AspNetCore.Http.CookieSecurePolicy.Always;
    //x.Events = new Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents
    //{
    //    OnRedirectToLogin = context =>
    //    {
    //        context.Response.StatusCode = 401;
    //        return Task.CompletedTask;
    //    }
    //};

});
builder.Services.AddScoped<IUserClaimsPrincipalFactory<IdentityUser>, AppUserClaims>();
builder.Services.AddTransient<IEmailSender, EmailSender>();




// Add Email Service
builder.Services.AddTransient<ISendEmail, SendEmail>();
// Add Email Settings
builder.Services.Configure<EmailSettings>(builder.Configuration.GetSection("EmailSettings"));


// Schedule the vulnerability scan
builder.Services.AddScheduler();
builder.Services.AddTransient<ScheduleJob>();



// SignalR
builder.Services.AddSignalR(x => x.EnableDetailedErrors = true);
builder.Services.AddScoped<NotificationHub>();

var app = builder.Build();



app.UseSerilogRequestLogging();
// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseStatusCodePagesWithRedirects("/Home/Error?statusCode={0}");
app.UseHttpsRedirection();
app.UseStaticFiles();

// Schedule
app.Services.UseScheduler(scheduler =>
{
    scheduler.Schedule<ScheduleJob>().Monthly();

});

// Tillåt POST-anrop 
app.UseCors(builder =>
{
    builder.AllowAnyOrigin();
    builder.AllowAnyMethod();
    builder.AllowAnyHeader();
});


app.UseRouting();
//app.UseAuthentication();
app.UseAuthorization();
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
app.MapHub<NotificationHub>("/notificationHub");
app.Run();
