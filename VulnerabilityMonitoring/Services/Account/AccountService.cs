using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using VulnerabilityMonitoring.Models;
using VulnerabilityMonitoring.Models.AccountViewModels;
using VulnerabilityMonitoring.Models.Identity;
using VulnerabilityMonitoring.Models.Operations;
using VulnerabilityMonitoring.Services.Account;

public interface IAccountService
{
    Task<OperationResult> UpdateProfileAsync(ProfileViewModel userProfil);
    Task<OperationResult> UpdateSeverityAsync(SettingViewModel userProfile, Guid Id);
    Task<bool> DeleteUserAsync(string id);
    Task<IEnumerable<UserProfileEntity>> GetAllUserProfileAsync();
    Task<UserProfileEntity> GetUserByIdAsync(string id);
    Task<UserProfileEntity> GetProfileIdAsync(Guid id);
    Task<OperationResult> RegisterAsync(RegisterViewModel model);
    Task<bool> ResetPasswordAsync(ResetPasswordViewModel model);
    Task<bool> InstallationAsync(RegisterViewModel model);
    Task<IEnumerable<UserViewModel>> GetAllUserAsync();
    Task<bool> ChangeRoleAsync(ChangeRoleViewModels roleViewModels);
    Task<bool> SetUserLockoutStatusAsync(string userId, bool lockout);
}

public class AccountService : IAccountService
{
    private readonly UserManager<IdentityUser> _userManager;
    private readonly SignInManager<IdentityUser> _signInManager;
    private readonly IdentityContext _identityDB;
    private readonly IProfileService _profile;
    private readonly IEmailSender<IdentityUser> _emailSender;
    private readonly RoleManager<IdentityRole> _roleManager;

    public AccountService(UserManager<IdentityUser> userManager, IdentityContext identityDB, IProfileService profile, SignInManager<IdentityUser> signInManager, IEmailSender<IdentityUser> emailSender, RoleManager<IdentityRole> roleManager)
    {
        _userManager = userManager;
        _identityDB = identityDB;
        _profile = profile;
        _signInManager = signInManager;
        _emailSender = emailSender;
        _roleManager = roleManager;
    }

    public async Task<OperationResult> UpdateProfileAsync(ProfileViewModel userProfile)
    {
        var result = new OperationResult();
        try
        {
            var db = await _identityDB.UserProfile.FindAsync(userProfile.Id);
            if (db != null)
            {
                foreach (var prop in typeof(ProfileViewModel).GetProperties())
                {
                    var newValue = prop.GetValue(userProfile);
                    if (newValue != null && !string.IsNullOrWhiteSpace(newValue.ToString()))
                    {
                        var dbProp = db.GetType().GetProperty(prop.Name);
                        if (dbProp != null && dbProp.CanWrite)
                        {
                            dbProp.SetValue(db, newValue);
                        }
                    }
                }
                if (userProfile.ProfileImage != null)
                {
                    db.ImageName = await _profile.UploadProfileImageAsync(userProfile.ProfileImage);
                }
                _identityDB.UserProfile.Update(db);
                await _identityDB.SaveChangesAsync();

                var user = await _userManager.FindByIdAsync(db.UserId);
                if (!string.IsNullOrWhiteSpace(userProfile.NewPassword))
                {
                    var changePasswordResult = await _userManager.ChangePasswordAsync(user!, userProfile.OldPassword, userProfile.NewPassword);
                    if (!changePasswordResult.Succeeded)
                    {
                        result.Succeeded = false;
                        result.Message = string.Join(", ", changePasswordResult.Errors.Select(e => e.Description));
                        return result;
                    }
                }

                if (user.Email != userProfile.Email)
                {
                    user.Email = userProfile.Email;
                    user.UserName = userProfile.Email;
                    var updateEmailResult = await _userManager.UpdateAsync(user);
                    if (!updateEmailResult.Succeeded)
                    {
                        result.Succeeded = false;
                        result.Message = string.Join(", ", updateEmailResult.Errors.Select(e => e.Description));
                        return result;
                    }
                }

                result.Succeeded = true;
                result.Message = "Profile updated successfully.";
                return result;
            }
            result.Succeeded = false;
            result.Message = "User profile not found.";
            return result;
        }
        catch (Exception ex)
        {
            result.Succeeded = false;
            result.Message = ex.Message;
            return result;
        }
    }


    public async Task<OperationResult> UpdateSeverityAsync(SettingViewModel userProfile, Guid id)
    {
        var result = new OperationResult();
        try
        {
            var db = await _identityDB.UserProfile.FindAsync(id);
            if (db != null)
            {
                db.EnableHighSeverity = userProfile.EnableHighSeverity;
                db.EnableModerateSeverity = userProfile.EnableModerateSeverity;
                db.EnableCriticalSeverity = userProfile.EnableCriticalSeverity;
                db.EnableAllSeverity = userProfile.EnableAllSeverity;
                db.DisableNotifications = userProfile.DisableNotifications;
                _identityDB.UserProfile.Update(db);
                await _identityDB.SaveChangesAsync();
                result.Succeeded = true;
                result.Message = "Settings updated successfully.";
                return result;
            }
            result.Succeeded = false;
            result.Message = "User profile not found.";
            return result;
        }
        catch (Exception ex)
        {
            result.Succeeded = false;
            result.Message = ex.Message;
            return result;
        }

    }


    public async Task<IEnumerable<UserProfileEntity>> GetAllUserProfileAsync()
    {
        try
        {
            var result = await _identityDB.UserProfile.ToListAsync();
            if (result == null) { return null!; }
            return result;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }
    public async Task<IEnumerable<UserViewModel>> GetAllUserAsync()
    {
        try
        {
            var users = await _identityDB.UserProfile.ToListAsync();
            var myUsers = await _userManager.Users.ToListAsync();
            List<UserViewModel> userViewModels = new List<UserViewModel>();

            if (users == null) { return null!; }

            foreach (var user in myUsers)
            {
                var profile = users.FirstOrDefault(x => x.UserId == user.Id);
                if (profile != null)
                {
                    userViewModels.Add(new UserViewModel
                    {
                        Email = user.Email,
                        UserId = user.Id,
                        Role = (await _userManager.GetRolesAsync(user)).FirstOrDefault()!,
                        FirstName = profile.FirstName,
                        LastName = profile.LastName,
                        IsLockedOut = await _userManager.IsLockedOutAsync(user)

                    });
                }
            }

            return userViewModels;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    // Change Role
    public async Task<bool> ChangeRoleAsync(ChangeRoleViewModels roleViewModels)
    {
        var user = await _userManager.FindByIdAsync(roleViewModels.UserId);
        if (user == null)
        {
            return false;
        }

        var roles = await _userManager.GetRolesAsync(user);
        await _userManager.RemoveFromRolesAsync(user, roles);
        await _userManager.AddToRoleAsync(user, roleViewModels.Role);
        await _userManager.UpdateSecurityStampAsync(user);

        return true;
    }

    public async Task<bool> DeleteUserAsync(string id)
    {
        var user = await _userManager.FindByIdAsync(id);
        if (user == null) { return false; }
        var roles = await _userManager.GetRolesAsync(user);
        var users = await GetUserByIdAsync(id);

        if (users == null) { return false; }
        _identityDB.UserProfile.Remove(users);
        await _identityDB.SaveChangesAsync();
        await _userManager.DeleteAsync(users.User);
        await _userManager.RemoveFromRolesAsync(users.User, roles);

        return true;
    }

    public async Task<bool> SetUserLockoutStatusAsync(string userId, bool lockout)
    {
        var user = await _userManager.FindByIdAsync(userId);
        if (user == null)
        {
            return false;
        }

        if (lockout)
        {
            await _userManager.SetLockoutEndDateAsync(user, DateTimeOffset.MaxValue);
            await _userManager.UpdateSecurityStampAsync(user);

        }
        else
        {
            await _userManager.SetLockoutEndDateAsync(user, DateTimeOffset.Now);
            await _userManager.UpdateSecurityStampAsync(user);
        }

        return true;
    }


    public async Task<UserProfileEntity> GetUserByIdAsync(string id)
    {
        var result = await _identityDB.UserProfile.FirstOrDefaultAsync(x => x.UserId == id);
        return result!;
    }

    public async Task<UserProfileEntity> GetProfileIdAsync(Guid id)
    {
        var result = await _identityDB.UserProfile.FirstOrDefaultAsync(x => x.Id == id);
        return result!;
    }

    public async Task<OperationResult> RegisterAsync(RegisterViewModel model)
    {
        var operationResult = new OperationResult();
        try
        {
            if (await _userManager.Users.AnyAsync(x => x.Email == model.Email))
            {
                operationResult.Succeeded = false;
                operationResult.Message = "User already exists.";
                return operationResult;
            }

            var identityUser = new IdentityUser { UserName = model.Email, Email = model.Email };
            var result = await _userManager.CreateAsync(identityUser, model.Password);
            if (result.Succeeded)
            {
                var profileEntity = new UserProfileEntity
                {
                    UserId = identityUser.Id,
                    FirstName = model.FirstName,
                    LastName = model.LastName,
                    Email = model.Email,
                    CreatedAt = DateTime.Now
                };

                if (model.ProfileImage != null)
                    profileEntity.ImageName = await _profile.UploadProfileImageAsync(model.ProfileImage);

                _identityDB.Add(profileEntity);
                await _identityDB.SaveChangesAsync();
                await _userManager.AddToRoleAsync(identityUser, "Developer");

                //var signInResult = await _signInManager.PasswordSignInAsync(identityUser, model.Password, false, false);
                operationResult.Succeeded = true;
                operationResult.Message = "User created successfully.";
                return operationResult;
            }

            operationResult.Succeeded = false;
            operationResult.Message = string.Join(", ", result.Errors.Select(e => e.Description));
            return operationResult;
        }
        catch (Exception ex)
        {
            operationResult.Succeeded = false;
            operationResult.Message = ex.Message;
            return operationResult;
        }
    }



    public async Task<bool> ResetPasswordAsync(ResetPasswordViewModel model)
    {
        var user = await _userManager.FindByEmailAsync(model.Email);
        if (user == null)
        {
            return false;
        }

        var result = await _userManager.ResetPasswordAsync(user, model.Code, model.Password);
        return result.Succeeded;
    }

    public async Task<bool> InstallationAsync(RegisterViewModel model)
    {
        if (await _userManager.Users.AnyAsync())
        {
            return false; // Användare finns redan
        }

        if (!await _roleManager.Roles.AnyAsync())
        {
            await _roleManager.CreateAsync(new IdentityRole("Admin"));
            await _roleManager.CreateAsync(new IdentityRole("Developer"));
        }

        var identityUser = new IdentityUser
        {
            Email = model.Email,
            UserName = model.Email
        };

        var result = await _userManager.CreateAsync(identityUser, model.Password);
        if (result.Succeeded)
        {
            var profileEntity = new UserProfileEntity
            {
                UserId = identityUser.Id,
                FirstName = model.FirstName,
                LastName = model.LastName,
                Email = model.Email,
                CreatedAt = DateTime.Now
            };

            if (model.ProfileImage != null)
                profileEntity.ImageName = await _profile.UploadProfileImageAsync(model.ProfileImage);

            _identityDB.Add(profileEntity);
            await _identityDB.SaveChangesAsync();
            await _userManager.AddToRoleAsync(identityUser, "Admin");

            return true;
        }

        return false;
    }
}
