using MailKit.Net.Smtp;
using MailKit.Security;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Options;
using MimeKit;
using VulnerabilityMonitoring.Models.Config;

namespace VulnerabilityMonitoring.Services.Email
{
    /// <summary>
    /// Service for sending emails related to account management.
    /// </summary>
    public class EmailSender : IEmailSender<IdentityUser>
    {
        private readonly EmailSettings _emailSettings;


        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSender"/> class.
        /// </summary>
        /// <param name="emailSettings">Email settings injected from configuration.</param>       
        public EmailSender(IOptions<EmailSettings> emailSettings)
        {
            _emailSettings = emailSettings?.Value ?? throw new ArgumentNullException(nameof(emailSettings));
        }

        /// <summary>
        /// Sends an email confirmation link to the specified user.
        /// </summary>
        /// <param name="user">The user to send the email to.</param>
        /// <param name="email">The email address of the user.</param>
        /// <param name="confirmationLink">The confirmation link to include in the email.</param>
        public async Task SendConfirmationLinkAsync(IdentityUser user, string email, string confirmationLink)
        {
            if (user == null) throw new ArgumentNullException(nameof(user));
            if (string.IsNullOrEmpty(email)) throw new ArgumentException("Email cannot be null or empty.", nameof(email));
            if (string.IsNullOrEmpty(confirmationLink)) throw new ArgumentException("Confirmation link cannot be null or empty.", nameof(confirmationLink));

            var subject = "Confirm your email";
            var body = $"Please confirm your account by clicking this link: <a href='{confirmationLink}'>link</a>";
            await SendEmailAsync(email, subject, body);
        }

        /// <summary>
        /// Sends a password reset code to the specified user.
        /// </summary>
        /// <param name="user">The user to send the email to.</param>
        /// <param name="email">The email address of the user.</param>
        /// <param name="resetCode">The password reset code to include in the email.</param>
        public async Task SendPasswordResetCodeAsync(IdentityUser user, string email, string resetCode)
        {
            if (user == null) throw new ArgumentNullException(nameof(user));
            if (string.IsNullOrEmpty(email)) throw new ArgumentException("Email cannot be null or empty.", nameof(email));
            if (string.IsNullOrEmpty(resetCode)) throw new ArgumentException("Reset code cannot be null or empty.", nameof(resetCode));

            var subject = "Password Reset Code";
            var body = $"Your password reset code is: {resetCode}";
            await SendEmailAsync(email, subject, body);
        }

        /// <summary>
        /// Sends a password reset link to the specified user.
        /// </summary>
        /// <param name="user">The user to send the email to.</param>
        /// <param name="email">The email address of the user.</param>
        /// <param name="resetLink">The password reset link to include in the email.</param>
        public async Task SendPasswordResetLinkAsync(IdentityUser user, string email, string resetLink)
        {
            if (user == null) throw new ArgumentNullException(nameof(user));
            if (string.IsNullOrEmpty(email)) throw new ArgumentException("Email cannot be null or empty.", nameof(email));
            if (string.IsNullOrEmpty(resetLink)) throw new ArgumentException("Reset link cannot be null or empty.", nameof(resetLink));

            var subject = "Reset your password";
            var body = $"You can reset your password by clicking this link: <a href='{resetLink}'>link</a>";
            await SendEmailAsync(email, subject, body);
        }

        /// <summary>
        /// Sends an email with the specified subject and body to the specified recipient.
        /// </summary>
        /// <param name="recipientEmail">The recipient's email address.</param>
        /// <param name="subject">The subject of the email.</param>
        /// <param name="htmlBody">The HTML body of the email.</param>
        /// <param name="textBody">The plain text body of the email. Defaults to a message indicating HTML support is required.</param>
        private async Task SendEmailAsync(string recipientEmail, string subject, string htmlBody, string? textBody = null)
        {
            var message = new MimeMessage();
            message.From.Add(new MailboxAddress(_emailSettings.SenderName, _emailSettings.Username));
            message.To.Add(new MailboxAddress(recipientEmail, recipientEmail));
            message.Subject = subject;

            var bodyBuilder = new BodyBuilder
            {
                HtmlBody = htmlBody,
                TextBody = textBody ?? "This email requires an HTML compatible email client."
            };
            message.Body = bodyBuilder.ToMessageBody();

            using var client = new SmtpClient();
            try
            {
                await client.ConnectAsync(_emailSettings.Host, _emailSettings.Port, SecureSocketOptions.StartTls);
                await client.AuthenticateAsync(_emailSettings.Username, _emailSettings.Password);
                await client.SendAsync(message);
                Serilog.Log.Information("Email sent to {RecipientEmail}", recipientEmail);
            }
            catch (SmtpCommandException ex)
            {
                Serilog.Log.Error("SMTP command error when sending email to {RecipientEmail}: {Message}", recipientEmail, ex.Message);
                throw new InvalidOperationException($"Failed to send email to {recipientEmail}", ex);
            }
            catch (SmtpProtocolException ex)
            {
                Serilog.Log.Error("SMTP protocol error when sending email to {RecipientEmail}: {Message}", recipientEmail, ex.Message);
                throw new InvalidOperationException($"Failed to send email to {recipientEmail}", ex);
            }
            catch (Exception ex)
            {
                Serilog.Log.Error("Unexpected error when sending email to {RecipientEmail}: {Message}", recipientEmail, ex.Message);
                throw new InvalidOperationException($"Failed to send email to {recipientEmail}", ex);
            }
            finally
            {
                await client.DisconnectAsync(true);
            }
        }
    }
}
