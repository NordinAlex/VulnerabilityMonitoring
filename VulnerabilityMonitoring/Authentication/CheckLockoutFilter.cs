using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;

public class CheckLockoutFilter : IAsyncActionFilter
{
    private readonly UserManager<IdentityUser> _userManager;
    private readonly SignInManager<IdentityUser> _signInManager;

    /// <summary>
    /// An action filter that checks if the current user is locked out. If the user is locked out,
    /// they are signed out and redirected to a locked-out page. Otherwise, the request proceeds to the next action or filter.
    /// </summary>
    public CheckLockoutFilter(UserManager<IdentityUser> userManager, SignInManager<IdentityUser> signInManager)
    {
        _userManager = userManager;
        _signInManager = signInManager;
    }

    /// <summary>
    /// Asynchronously called before the action method is invoked. It checks if the current user is locked out.
    /// If the user is locked out, they are signed out and redirected to a locked-out page. Otherwise, the action continues to execute.
    /// </summary>
    /// <param name="context">Provides the context for the action filter, including the HttpContext.</param>
    /// <param name="next">The delegate to the next action filter or action method in the pipeline.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
    {
        var user = await _userManager.GetUserAsync(context.HttpContext.User);
        if (user != null && await _userManager.IsLockedOutAsync(user))
        {
            await _signInManager.SignOutAsync();
            await _userManager.UpdateSecurityStampAsync(user);
            context.Result = new RedirectToActionResult("LockedOut", "Account", null);
        }
        else
        {
            await next(); // Fortsätt till nästa filter eller action
        }
    }
}
