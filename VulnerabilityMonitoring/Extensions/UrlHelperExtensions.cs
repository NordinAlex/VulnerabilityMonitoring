using Microsoft.AspNetCore.Mvc;
using VulnerabilityMonitoring.Controllers;

namespace VulnerabilityMonitoring.Extensions
{
    /// <summary>
    /// Provides extension methods for generating email confirmation and password reset links.
    /// </summary>
    public static class UrlHelperExtensions
    {
        /// <summary>
        /// Generates an email confirmation link.
        /// </summary>
        /// <param name="urlHelper">The URL helper instance.</param>
        /// <param name="userId">The user's ID.</param>
        /// <param name="emailConfirmationCode">The email confirmation code.</param>
        /// <param name="urlScheme">The URL scheme (e.g., "http" or "https").</param>
        /// <returns>The email confirmation link.</returns>
        public static string GenerateEmailConfirmationLink(this IUrlHelper urlHelper, string userId, string emailConfirmationCode, string urlScheme)
        {
            if (urlHelper == null)
                throw new ArgumentNullException(nameof(urlHelper));
            if (string.IsNullOrEmpty(userId))
                throw new ArgumentException("User ID cannot be null or empty.", nameof(userId));
            if (string.IsNullOrEmpty(emailConfirmationCode))
                throw new ArgumentException("Email confirmation code cannot be null or empty.", nameof(emailConfirmationCode));
            if (string.IsNullOrEmpty(urlScheme))
                throw new ArgumentException("URL scheme cannot be null or empty.", nameof(urlScheme));

            //return urlHelper.Action(
            //    action: nameof(AccountController.ConfirmEmail),
            //    controller: "Account",
            //    values: new { userId, code = emailConfirmationCode },
            //    protocol: urlScheme);

            return urlHelper.Action(
               action: nameof(AccountController.ConfirmEmail),
               controller: "Account",
               values: new { userId, code = emailConfirmationCode },
               protocol: urlScheme)!; // Note the null-forgiving operator here
        }

        /// <summary>
        /// Generates a password reset callback link.
        /// </summary>
        /// <param name="urlHelper">The URL helper instance.</param>
        /// <param name="userId">The user's ID.</param>
        /// <param name="passwordResetCode">The password reset code.</param>
        /// <param name="urlScheme">The URL scheme (e.g., "http" or "https").</param>
        /// <returns>The password reset callback link.</returns>
        public static string GenerateResetPasswordCallbackLink(this IUrlHelper urlHelper, string userId, string passwordResetCode, string urlScheme)
        {
            if (urlHelper == null)
                throw new ArgumentNullException(nameof(urlHelper));
            if (string.IsNullOrEmpty(userId))
                throw new ArgumentException("User ID cannot be null or empty.", nameof(userId));
            if (string.IsNullOrEmpty(passwordResetCode))
                throw new ArgumentException("Password reset code cannot be null or empty.", nameof(passwordResetCode));
            if (string.IsNullOrEmpty(urlScheme))
                throw new ArgumentException("URL scheme cannot be null or empty.", nameof(urlScheme));

            return urlHelper.Action(
                action: nameof(AccountController.ResetPassword),
                controller: "Account",
                values: new { userId, code = passwordResetCode },
                protocol: urlScheme)!;
        }
    }
}
