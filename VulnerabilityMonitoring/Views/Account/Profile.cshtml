@model VulnerabilityMonitoring.Models.AccountViewModels.SettingProfileViewModel
@{
    ViewData["Title"] = "Profile";
}


<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-md-12 page-header">
            <h1 class="page-title">Profile</h1>
        </div>
    </div>
    <hr />
    <div class="row">
        <!-- Left column for ProfileViewModel fields -->
        <!-- Meddelande Div -->
        <div class="col-md-12" id="messageDiv"></div>
        <section class="col-md-6 mb-2">
            <form id="profileForm">
                <div class="mb-3">
                    <div asp-validation-summary="All" class="text-danger"></div>
                </div>
                <div class="mb-3">
                    <label for="firstName" class="form-label">First Name</label>
                    <input type="text" class="form-control" id="firstName" name="firstName"
                        placeholder="@Model.Profile.FirstName">
                </div>
                <div class="mb-3">
                    <label for="lastName" class="form-label">Last Name</label>
                    <input type="text" class="form-control" id="lastName" name="lastName"
                        placeholder="@Model.Profile.LastName">
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" name="email" placeholder="@Model.Profile.Email">
                </div>
                <div class="mb-3">
                    <label for="oldPassword" class="form-label">Old Password*</label>
                    <input type="password" class="form-control" id="oldPassword" name="oldPassword">
                </div>
                <div class="mb-3">
                    <label for="newPassword" class="form-label">New Password*</label>
                    <input type="password" class="form-control" id="newPassword" name="newPassword">
                </div>
                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm New Password*</label>
                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword">
                </div>
                <button type="button" onclick="postProfile()" class="btn btn-primary">Update Profile</button>
            </form>
        </section>

        <!-- Right column for SettingViewModel fields -->
        <section class="col-md-6 mt-2">
            <form id="SeverityForm">
                <div class="form-group">
                    <label class="form-label">Severity level:</label>
                    <div class="mb-3">
                        <div asp-validation-summary="All" class="text-danger"></div>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="severity" id="enableHighSeverity"
                            value="high" autocomplete="off" @(Model.Setting.EnableHighSeverity == true ?
                            "checked='checked'" : "")>
                        <label class="form-check-label" for="enableHighSeverity"
                            title="Aktivera notifikationer för höga säkerhetsrisker">Enable High Severity</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="severity" id="enableModerateSeverity"
                            value="moderate" autocomplete="off" @(Model.Setting.EnableModerateSeverity == true ?
                            "checked='checked'" : "")>
                        <label class="form-check-label" for="enableModerateSeverity"
                            title="Aktivera notifikationer för moderata säkerhetsrisker">Enable Moderate
                            Severity</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="severity" id="enableCriticalSeverity"
                            value="critical" autocomplete="off" @(Model.Setting.EnableCriticalSeverity == true ?
                            "checked='checked'" : "")>
                        <label class="form-check-label" for="enableCriticalSeverity"
                            title="Aktivera notifikationer för kritiska säkerhetsrisker">Enable Critical
                            Severity</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="severity" id="enableAllSeverity" value="all"
                            autocomplete="off" @(Model.Setting.EnableAllSeverity == true ? "checked='checked'" : "")>
                        <label class="form-check-label" for="enableAllSeverity"
                            title="Aktivera notifikationer för alla säkerhetsrisknivåer">Enable All Severity</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="severity" id="disableNotifications"
                            value="none" autocomplete="off" @(Model.Setting.DisableNotifications == true ?
                            "checked='checked'" : "")>
                        <label class="form-check-label" for="disableNotifications"
                            title="Inaktivera alla notifikationer">Disable Notifications</label>
                    </div>
                </div>
                <button type="button" onclick="postSettings()" class="btn btn-primary">Update Settings</button>
            </form>
        </section>

    </div>
</div>

@section Scripts {
    <script>
        function showMessage(message, isSuccess = true) {
            const messageDiv = document.getElementById('messageDiv');
            if (typeof message === 'object') {
                const errorMessages = Object.values(message).flat().map(msg => `<li>${msg}</li>`).join('');              
                messageDiv.innerHTML = `<div class="alert ${isSuccess ? 'alert-success' : 'alert-danger'}" role="alert"><ul>${errorMessages}</ul></div>`;
            } else {
                messageDiv.innerHTML = `<div class="alert ${isSuccess ? 'alert-success' : 'alert-danger'}" role="alert">${message}</div>`;               
            }

            messageDiv.style.display = 'block';
            setTimeout(() => {
                messageDiv.style.display = 'none';
            }, 15000);
        }

        function postProfile() {
            const formData = {
                firstName: document.getElementById('firstName').value,
                lastName: document.getElementById('lastName').value,
                email: document.getElementById('email').value,
                oldPassword: document.getElementById('oldPassword').value,
                newPassword: document.getElementById('newPassword').value,
                confirmPassword: document.getElementById('confirmPassword').value
            };

            axios.put('/Account/UpdateProfile', JSON.stringify(formData), {
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(function (response) {
                    showMessage(response.data.message, response.data.succeeded);
                    console.log(response);
                })
                .catch(function (error) {
                    if (error.response && error.response.data) {
                        if (error.response.data.message) {
                            showMessage(error.response.data.message, false);
                        } else {
                            showMessage(error.response.data, false);
                        }
                    } else {
                        showMessage('An unknown error occurred while updating the profile.', false);
                    }

                    console.log(error);
                });
        }

        function postSettings() {
            // Kontrollera om någon av radioknapparna är markerad
            const radios = document.querySelectorAll('input[name="severity"]');
            let isChecked = false;
            radios.forEach(radio => {
                if (radio.checked) {
                    isChecked = true;
                }
            });

            if (!isChecked) {
                showMessage('Please select a severity level before updating the settings.', false);
                return; // Avbryt skickandet av formuläret
            }
            const formData = {
                enableHighSeverity: document.getElementById('enableHighSeverity').checked,
                enableModerateSeverity: document.getElementById('enableModerateSeverity').checked,
                enableCriticalSeverity: document.getElementById('enableCriticalSeverity').checked,
                enableAllSeverity: document.getElementById('enableAllSeverity').checked,
                disableNotifications: document.getElementById('disableNotifications').checked
            };

            axios.put('/Account/UpdateSeverity', JSON.stringify(formData), {
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(function (response) {
                    showMessage(response.data.message, response.data.succeeded);
                    console.log(response);
                })
                .catch(function (error) {
                    if (error.response && error.response.data) {
                        if (error.response.data.message) {
                            showMessage(error.response.data.message, false);
                        } else {
                            showMessage(error.response.data, false);
                        }
                    } else {
                        showMessage('An unknown error occurred while updating the profile.', false);
                    }

                    console.log(error);
                });
        }
    </script>
}
