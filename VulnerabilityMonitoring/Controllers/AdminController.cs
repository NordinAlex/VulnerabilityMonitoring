using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using VulnerabilityMonitoring.Helper;
using VulnerabilityMonitoring.Models.AccountViewModels;
using VulnerabilityMonitoring.Services.Account;

namespace VulnerabilityMonitoring.Controllers
{
    [Authorize(Roles = "Admin")]
    public class AdminController : Controller
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly IAccountService _accountService;
        private readonly ILogger<AdminController> _logger;
        private readonly RoleManager<IdentityRole> _roleManager;
        public AdminController(UserManager<IdentityUser> userManager, IAccountService accountService, IProfileService profileService, ILogger<AdminController> logger, RoleManager<IdentityRole> roleManager)
        {
            _userManager = userManager;
            _accountService = accountService;
            _logger = logger;
            _roleManager = roleManager;
        }

        [AllowAnonymous]
        public async Task<IActionResult> Installation(string returnUrl = null!)
        {
            try
            {
                if (await _userManager.Users.AnyAsync())
                    return RedirectToAction("Login", "Account");

                var form = new RegisterViewModel
                {
                    ReturnUrl = returnUrl ?? Url.Content("~/")
                };

                return View(form);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred during installation setup.");
                return RedirectHelper.ToError(this, 500, ex.Message);
            }
        }

        [AllowAnonymous]
        [HttpPost]
        public async Task<IActionResult> Installation(RegisterViewModel form)
        {
            if (!ModelState.IsValid)
            {
                ModelState.AddModelError(string.Empty, "Invalid registration attempt.");
                return View(form);
            }

            try
            {
                var result = await _accountService.InstallationAsync(form);
                if (result)
                {
                    return LocalRedirect(form.ReturnUrl);
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "Unable to create an Account.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred during installation.");
                ModelState.AddModelError(string.Empty, "An error occurred during installation.");
            }

            return View(form);
        }

        [HttpGet]
        public async Task<IActionResult> Index()
        {
            try
            {
                var users = await _accountService.GetAllUserAsync();

                return View(users);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while retrieving users.");
                return RedirectHelper.ToError(this, 500, ex.Message);
            }
        }

        // GET: Change Role
        [HttpGet]
        public async Task<IActionResult> ChangeRole(string id)
        {
            try
            {
                var user = await _accountService.GetUserByIdAsync(id);
                if (user == null)
                {
                    return View("NotFound");
                }

                var model = new ChangeRoleViewModels
                {
                    UserId = user.UserId,
                    Role = (await _userManager.GetRolesAsync(await _userManager.FindByIdAsync(user.UserId))).FirstOrDefault()!,
                    UserName = user.FirstName + " " + user.LastName,
                    Email = user.Email
                };

                ViewBag.Roles = new SelectList(await _roleManager.Roles.ToListAsync(), "Name", "Name");
                return View(model);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while changing the role.");
                return RedirectHelper.ToError(this, 500, ex.Message);
            }
        }

        // POST: Change Role
        [HttpPost]
        public async Task<IActionResult> ChangeRole(ChangeRoleViewModels roleViewModels)
        {
            if (!ModelState.IsValid)
            {
                ViewBag.Roles = new SelectList(await _roleManager.Roles.ToListAsync(), "Name", "Name");
                return View(roleViewModels);
            }

            try
            {
                var result = await _accountService.ChangeRoleAsync(roleViewModels);
                if (result)
                {
                    return RedirectToAction(nameof(Index));
                }
                else
                {
                    return View("NotFound");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while changing the role.");
                return RedirectHelper.ToError(this, 500, ex.Message);
            }
        }



        [HttpPost]
        public async Task<IActionResult> DeleteUser(string id)
        {
            try
            {
                if (string.IsNullOrEmpty(id))
                {
                    return View("NotFound");
                }

                var result = await _accountService.DeleteUserAsync(id);
                if (!result)
                {
                    return View("NotFound");
                }

                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while deleting the user.");
                return RedirectHelper.ToError(this, 500, ex.Message);
            }
        }
        public async Task<IActionResult> SetLockoutStatus(string id, bool lockout)
        {
            try
            {
                var result = await _accountService.SetUserLockoutStatusAsync(id, lockout);
                if (result)
                {
                    return RedirectToAction(nameof(Index));
                }
                else
                {
                    return View("NotFound");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while changing the lockout status.");
                return RedirectHelper.ToError(this, 500, ex.Message);
            }
        }

    }
}
