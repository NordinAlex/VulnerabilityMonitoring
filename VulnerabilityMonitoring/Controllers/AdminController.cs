using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using VulnerabilityMonitoring.Models.AccountViewModels;
using VulnerabilityMonitoring.Services.Account;

namespace VulnerabilityMonitoring.Controllers
{
    [Authorize(Roles = "Admin")]
    public class AdminController : Controller
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly IAccountService _accountService;
        private readonly ILogger<AdminController> _logger;

        public AdminController(UserManager<IdentityUser> userManager, IAccountService accountService, IProfileService profileService, ILogger<AdminController> logger)
        {
            _userManager = userManager;
            _accountService = accountService;
            _logger = logger;
        }

        [AllowAnonymous]
        public async Task<IActionResult> Installation(string returnUrl = null!)
        {
            try
            {
                if (await _userManager.Users.AnyAsync())
                    return RedirectToAction("Login", "Account");

                var form = new RegisterViewModel
                {
                    ReturnUrl = returnUrl ?? Url.Content("~/")
                };

                return View(form);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred during installation setup.");
                return RedirectToAction("Error", "Home", new { statusCode = 500, exceptionMessage = ex.Message });
            }
        }

        [AllowAnonymous]
        [HttpPost]
        public async Task<IActionResult> Installation(RegisterViewModel form)
        {
            if (!ModelState.IsValid)
            {
                ModelState.AddModelError(string.Empty, "Invalid registration attempt.");
                return View(form);
            }

            try
            {
                var result = await _accountService.InstallationAsync(form);
                if (result)
                {
                    return LocalRedirect(form.ReturnUrl);
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "Unable to create an Account.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred during installation.");
                ModelState.AddModelError(string.Empty, "An error occurred during installation.");
            }

            return View(form);
        }

        [HttpGet]
        public async Task<IActionResult> Index()
        {
            try
            {
                var data = await _accountService.GetAllUserAsync();
                return View(data);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while retrieving users.");
                return RedirectToAction("Error", "Home", new { statusCode = 500, exceptionMessage = ex.Message });
            }
        }

        [HttpPost, ActionName("Delete")]
        public async Task<IActionResult> DeleteUser(string id)
        {
            try
            {
                var user = await _accountService.GetUserByIdAsync(id);
                if (user == null)
                {
                    _logger.LogWarning("User with ID {UserId} not found.", id);
                    return View("NotFound");
                }

                await _accountService.DeleteUserAsync(user.Id);
                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while deleting the user.");
                return RedirectToAction("Error", "Home", new { statusCode = 500, exceptionMessage = ex.Message });
            }
        }
    }
}
