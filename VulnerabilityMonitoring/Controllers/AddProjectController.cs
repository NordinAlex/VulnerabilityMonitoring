using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using VulnerabilityMonitoring.Models.Dtos;
using VulnerabilityMonitoring.Models.ViewModels;
using VulnerabilityMonitoring.Services.API;
using VulnerabilityMonitoring.Services.Application;

namespace VulnerabilityMonitoring.Controllers;

[Authorize]
public class AddProjectController : Controller
{
    private readonly ILogger<AddProjectController> _logger;
    private readonly IAzureDevOpsService _azureDevOps;

    private readonly IProjectManagementService _managementService;


    public AddProjectController(
        ILogger<AddProjectController> logger,
        IAzureDevOpsService azureDevOps,
        IProjectManagementService managementService)
    {
        _logger = logger;
        _azureDevOps = azureDevOps;

        _managementService = managementService;
    }

    public async Task<IActionResult> Index()
    {
        try
        {
            var newProjects = new List<RepositoryViewModel>();
            var existingProjects = await _managementService.GetAllProjectsAsync();

            var repositories = await _azureDevOps.GetAllRepositoriesAsync();

            foreach (var repository in repositories)
            {
                // Kontrollera om mappen redan finns och hoppa över den i så fall
                if (!existingProjects.Any(p => p.RepositoryName == repository.Name)) // 
                {
                    newProjects.Add(
                        new RepositoryViewModel
                        {
                            Name = repository.Name,
                            WebUrl = repository.WebUrl,
                            ProjectReference = repository.ProjectReference.Name,
                            Branch = repository.DefaultBranch,
                            RepositoryId = repository.Id
                        }
                    );

                    _logger.LogInformation($"Repository Name: {repository.Name}");
                }
            }

            var viewModel = new ProjectListViewModel
            {
                NewProjects = newProjects,
                ExistingProjects = existingProjects
            };

            return View(viewModel);
        }
        catch (Exception ex)
        {

            _logger.LogError("Error while getting all projects" + ex);
            return RedirectToAction("Error", "Home", new { statusCode = 500, exceptionMessage = ex.Message });
        }
    }

    [HttpPost]
    public async Task<IActionResult> AddProject([FromBody] AddProjectDto request)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(new { Status = "error", Message = "Invalid model state." });
        }

        try
        {

            var result = await _azureDevOps.SaveRepositoryFilesLocallyAsync(request.RepositoryId);
            if (result == null)
            {
                // Om result är false, returnera ett felmeddelande med statuskod 500 (Internal Server Error)
                return new ObjectResult(new { Status = "error", Message = "Could not download project." }) { StatusCode = 500, };
            }


            // ISaveToDatabaseService
            var saveResult = await _managementService.SaveProjectAsync(result);
            if (!saveResult)
            {

                return BadRequest(new { Status = "error", Message = "Could not save project to database." });
            }
            // return 200 OK status code med ett meddelande "Project added successfully."
            return Ok(new { Status = "success", Message = "Project added successfully." });


        }
        catch (Exception ex)
        {
            // Om något går fel, kan du fånga exception här och visa ett felmeddelande
            // 500 Internal Server Error
            _logger.LogError(ex, "Error adding project");
            return new ObjectResult(new { Status = "error", Message = "Internal server error" }) { StatusCode = 500, };
        }
    }

    // Ta bort projekt
    [HttpDelete]
    public async Task<IActionResult> DeleteProjectAsyn([FromBody] DeleteProjectDto request)
    {

        if (!ModelState.IsValid)
        {
            return BadRequest(new { Status = "error", Message = "Invalid model state." });
        }

        try
        {
            // Get project path from database
            var projectPath = await _managementService.GetProjectAsync(request.RepositoryId);
            if (projectPath == null)
            {
                return BadRequest(new { Status = "error", Message = "Could not find project." });
            }


            var deleteFileresult = await _azureDevOps.DeleteLocalProjectDirectoryAsync(projectPath.ProjectsPath);
            if (!deleteFileresult)
            {
                return BadRequest(new { Status = "error", Message = "Could not delete project." });
            }
            var result = await _managementService.RemoveProjectAsync(request.RepositoryId);
            if (!result)
            {
                return BadRequest(new { Status = "error", Message = "Could not remove project." });
            }

            return Ok(new { Status = "success", Message = "Project removed successfully." });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error removing project");
            return new ObjectResult(new { Status = "error", Message = "Internal server error" }) { StatusCode = 500, };
        }
    }
    [Route("AddProject/GetProjectsAsync")]
    [HttpGet]
    public async Task<IActionResult> GetVulnerableProjectsAsync()
    {
        var newProjects = new List<RepositoryViewModel>();
        // var existingProjects = await _existingProjectService.GetExistingProjectsAsync();
        var existingProjects = await _managementService.GetAllProjectsAsync();

        var repositories = await _azureDevOps.GetAllRepositoriesAsync();

        foreach (var repository in repositories)
        {
            // Kontrollera om mappen redan finns och hoppa över den i så fall
            if (!existingProjects.Any(p => p.RepositoryName == repository.Name)) // 
            {
                newProjects.Add(
                    new RepositoryViewModel
                    {
                        Name = repository.Name,
                        WebUrl = repository.WebUrl,
                        ProjectReference = repository.ProjectReference.Name,
                        Branch = repository.DefaultBranch,
                        RepositoryId = repository.Id,

                    }
                );

                _logger.LogInformation($"Repository Name: {repository.Name}");
            }
        }

        var viewModel = new ProjectListViewModel
        {
            NewProjects = newProjects,
            ExistingProjects = existingProjects
        };


        return Ok(viewModel);
    }
}
