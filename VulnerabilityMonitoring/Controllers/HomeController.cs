using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using VulnerabilityMonitoring.Models.ViewModels;
using VulnerabilityMonitoring.Services.Application;
using VulnerabilityMonitoring.Services.Scan;

namespace VulnerabilityMonitoring.Controllers
{
    [Authorize]
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly IVulnerabilityScanService _vulnerabilityScan;
        private readonly IProjectManagementService _managementService;


        public HomeController(ILogger<HomeController> logger, IVulnerabilityScanService vulnerabilityScan, IProjectManagementService managementService)
        {
            _logger = logger;
            _vulnerabilityScan = vulnerabilityScan;
            _managementService = managementService;
        }

        public async Task<IActionResult> Index()
        {
            try
            {
                var vulnerableProjects = await _managementService.GetAllProjectsAsync();
                return View(vulnerableProjects);
            }
            catch (Exception ex)
            {
                _logger.LogError("Error while getting all projects" + ex);
                return RedirectToAction("Error", new { statusCode = 500 });
            }
        }


        [Route("Home/GetVulnerableProjectsAsync")]
        [HttpGet]
        public async Task<IActionResult> GetVulnerableProjectsAsync()
        {
            try
            {
                var vulnerableProjects = await _managementService.GetAllProjectsAsync();
                return PartialView("~/Views/Shared/Partials/Dashboard/_dashboardData.cshtml", vulnerableProjects);
            }
            catch (Exception ex)
            {
                _logger.LogError("Error while getting all projects" + ex);
                return RedirectToAction("Error", new { statusCode = 500 });
            }
        }

        public IActionResult RentManually()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> RunVulnerabilityScan(string ProjectsSlnPath, string ProjectsFramework, Guid RepositoryId)
        {
            try
            {
                VulnerableProjectViewModels viewModel = new VulnerableProjectViewModels();
                viewModel.ProjectsFramework = ProjectsFramework;
                viewModel.ProjectsSlnPath = ProjectsSlnPath;
                viewModel.RepositoryId = RepositoryId;
                var scanResult = await _vulnerabilityScan.RunVulnerabilityScanResultAsync(viewModel);
                if (scanResult == null)
                {
                    return NotFound();
                }
                if (scanResult.VulnerableProjectPackage.Count == 0)
                {
                    var toastNotification = new ToastNotification
                    {
                        message = "No vulnerabilities found",
                        status = ToastNotificationType.Success
                    };

                    TempData["ToastNotification"] = toastNotification;
                }
                else
                {
                    var toastNotification = new ToastNotification
                    {
                        message = "Vulnerabilities found",
                        status = ToastNotificationType.Warning
                    };
                    TempData["ToastNotification"] = toastNotification;
                }

                return View("RentManually", scanResult);


            }
            catch (Exception ex)
            {
                _logger.LogError("Error while running vulnerability scan" + ex);
                return RedirectToAction("Error", new { statusCode = 500 });
            }

        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error(int statusCode, string exceptionMessage)
        {
            var errorViewModel = new ErrorViewModel
            {
                StatusCode = statusCode,
                ExceptionMessage = exceptionMessage
            };

            if (statusCode == 404)
            {
                return View("NotFound", errorViewModel);
            }

            if (statusCode == 500)
            {
                return View("InternalServerError", errorViewModel);
            }

            return View(errorViewModel);
        }



    }
}
