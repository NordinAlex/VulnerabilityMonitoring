using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using VulnerabilityMonitoring.Helper;
using VulnerabilityMonitoring.Models.AccountViewModels;
using VulnerabilityMonitoring.Models.Operations;

namespace VulnerabilityMonitoring.Controllers;

[Authorize]
public class AccountController : Controller
{
    private readonly IAccountService _accountService;
    private readonly UserManager<IdentityUser> _userManager;
    private readonly SignInManager<IdentityUser> _signInManager;
    private readonly ILogger<AccountController> _logger;
    private readonly IEmailSender<IdentityUser> _emailSender;

    public AccountController(IAccountService accountService, UserManager<IdentityUser> userManager, SignInManager<IdentityUser> signInManager, ILogger<AccountController> logger, IEmailSender<IdentityUser> emailSender)
    {
        _accountService = accountService;
        _userManager = userManager;
        _signInManager = signInManager;
        _logger = logger;
        _emailSender = emailSender;
    }

    public async Task<IActionResult> Profile()
    {
        try
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
                return RedirectToAction("Error", "Home", new { statusCode = 500, exceptionMessage = "Something went wrong" });

            var profile = await _accountService.GetUserByIdAsync(user.Id);
            var model = new SettingProfileViewModel
            {
                Profile = new ProfileViewModel
                {
                    Id = profile.Id,
                    FirstName = profile.FirstName,
                    LastName = profile.LastName!,
                    Email = profile.Email,
                    ImageName = profile.ImageName
                },
                Setting = new SettingViewModel
                {
                    EnableHighSeverity = profile.EnableHighSeverity,
                    EnableModerateSeverity = profile.EnableModerateSeverity,
                    EnableCriticalSeverity = profile.EnableCriticalSeverity,
                    EnableAllSeverity = profile.EnableAllSeverity,
                    DisableNotifications = profile.DisableNotifications
                }
            };

            return View(model);
        }
        catch (Exception ex)
        {
            _logger.LogError("An error occurred while loading the profile." + ex);
            return RedirectHelper.ToError(this, 500, ex.Message);
        }
    }

    [Route("Account/UpdateProfile")]
    [HttpPut]
    public async Task<IActionResult> UpdateProfile([FromBody] ProfileViewModel model)
    {

        try
        {
            var user = await _userManager.GetUserAsync(User);
            var profile = await _accountService.GetUserByIdAsync(user!.Id);
            model.Id = profile.Id;
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var result = await _accountService.UpdateProfileAsync(model);
            if (!result.Succeeded)
            {
                return StatusCode(500, result);
            }

            return Ok(result);

        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while updating the profile.");
            var result = new OperationResult();
            {
                result.Succeeded = false;
                result.Message = ex.Message;
            }
            return StatusCode(500, result);
        }
    }

    [Route("Account/UpdateSeverity")]
    [HttpPut]
    public async Task<IActionResult> UpdateSeverity([FromBody] SettingViewModel models)
    {
        try
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var user = await _userManager.GetUserAsync(User);
            var profile = await _accountService.GetUserByIdAsync(user.Id);
            var result = await _accountService.UpdateSeverityAsync(models, profile.Id);
            if (!result.Succeeded)
            {
                return StatusCode(500, result);
            }

            return Ok(result);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while updating severity settings.");
            var result = new OperationResult();
            {
                result.Succeeded = false;
                result.Message = ex.Message;
            }
            return StatusCode(500, result);
        }
    }

    [HttpGet]
    [AllowAnonymous]
    public async Task<IActionResult> Login(string returnUrl = null!)
    {
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        var form = new LoginViewModel
        {
            ReturnUrl = returnUrl ?? Url.Content("~/")
        };

        return View(form);
    }

    [HttpPost]
    [AllowAnonymous]
    public async Task<IActionResult> Login(LoginViewModel model)
    {
        try
        {
            if (ModelState.IsValid)
            {
                var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: true);
                if (result.Succeeded)
                {
                    _logger.LogInformation("User logged in.");
                    return LocalRedirect(model.ReturnUrl);
                }
                if (result.IsLockedOut)
                {
                    _logger.LogWarning("User account locked out.");
                    return RedirectToAction(nameof(Lockout));
                }
                if (result.IsNotAllowed)
                {
                    var user = await _userManager.FindByEmailAsync(model.Email);
                    if (user != null && !await _userManager.IsEmailConfirmedAsync(user))
                    {
                        var NeedsEmailConfirmation = true;
                        ViewBag.NeedsEmailConfirmation = NeedsEmailConfirmation;
                        return View(model);
                    }
                    ModelState.AddModelError(string.Empty, "User is not allowed to login.");
                    return View(model);
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "User not fund");
                    return View(model);
                }
            }

            return View(model);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while logging in.");
            return RedirectHelper.ToError(this, 500, ex.Message);
        }
    }
    [Route("Account/ResendConfirmationEmail")]
    [HttpPost]
    [AllowAnonymous]
    public async Task<IActionResult> ResendConfirmationEmail([FromBody] ConfirmEmailViewModel confirmEmai)
    {
        try
        {
            if (string.IsNullOrEmpty(confirmEmai.Email))
            {
                return BadRequest("Email is required.");
            }

            var user = await _userManager.FindByEmailAsync(confirmEmai.Email);
            if (user == null)
            {
                return NotFound("User not found.");
            }

            // Generera bekräftelselänk
            var token = await _userManager.GenerateEmailConfirmationTokenAsync(user);
            var confirmationLink = Url.Action("ConfirmEmail", "Account", new { userId = user.Id, code = token }, Request.Scheme);

            // Skicka bekräftelsemail   
            await _emailSender.SendConfirmationLinkAsync(user, confirmEmai.Email, confirmationLink);
            return Ok();

        }
        catch (Exception)
        {
            return StatusCode(500, "An error occurred while resending confirmation email.");
        }
    }



    [HttpGet]
    [AllowAnonymous]
    public IActionResult Lockout()
    {
        return View();
    }

    [HttpGet]
    [Authorize(Roles = "Admin")]
    public async Task<IActionResult> Register(string returnUrl = null!)
    {
        try
        {
            if (!await _userManager.Users.AnyAsync())
                return RedirectToAction("Installation", "Admin");

            var form = new RegisterViewModel
            {
                ReturnUrl = returnUrl ?? Url.Content("~/")
            };

            return View(form);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while loading the registration page.");
            return RedirectHelper.ToError(this, 500, ex.Message);
        }
    }

    [HttpPost]
    [Authorize(Roles = "Admin")]
    public async Task<IActionResult> Register(RegisterViewModel model)
    {
        try
        {
            if (ModelState.IsValid)
            {
                var result = await _accountService.RegisterAsync(model);
                if (result.Succeeded)
                {
                    _logger.LogInformation("User created a new account with password.");
                    //return LocalRedirect(model.ReturnUrl);
                    return RedirectToAction(nameof(AdminController.Index), CtrlNameHelper.Get<AdminController>());
                }
                ModelState.AddModelError(string.Empty, result.Message!);
                return View(model);
            }

            ModelState.AddModelError(string.Empty, "Invalid registration attempt.");
            return View(model);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while registering.");
            return RedirectHelper.ToError(this, 500, ex.Message);
        }
    }

    [HttpGet]
    public async Task<IActionResult> Logout()
    {
        try
        {
            if (_signInManager.IsSignedIn(User))
                await _signInManager.SignOutAsync();
            _logger.LogInformation("User logged out.");
            return LocalRedirect("/");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while logging out.");
            return RedirectHelper.ToError(this, 500, ex.Message);
        }
    }

    [HttpGet]
    [AllowAnonymous]
    public async Task<IActionResult> ConfirmEmail(string userId, string code)
    {
        try
        {
            if (userId == null || code == null)
            {
                return RedirectToAction(nameof(HomeController.Index), CtrlNameHelper.Get<HomeController>());
            }

            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
            {
                throw new ApplicationException($"Unable to load user with ID '{userId}'.");
            }

            var result = await _userManager.ConfirmEmailAsync(user, code);
            return View(result.Succeeded ? "ConfirmEmail" : "Error");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while confirming email.");
            return RedirectHelper.ToError(this, 500, ex.Message);
        }
    }

    [HttpGet]
    [AllowAnonymous]
    public IActionResult ForgotPassword()
    {
        return View();
    }

    [HttpPost]
    [AllowAnonymous]
    public async Task<IActionResult> ForgotPassword(ForgotPasswordViewModel model)
    {
        try
        {
            if (ModelState.IsValid)
            {
                var user = await _userManager.FindByEmailAsync(model.Email);
                if (user == null)
                {
                    return RedirectToAction(nameof(ForgotPasswordConfirmation));
                }

                var code = await _userManager.GeneratePasswordResetTokenAsync(user);
                var callbackUrl = Url.GenerateResetPasswordCallbackLink(user.Id, code, Request.Scheme);
                await _emailSender.SendPasswordResetLinkAsync(user, model.Email, callbackUrl);
                return RedirectToAction(nameof(ForgotPasswordConfirmation));

            }

            return View(model);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while processing forgot password.");
            return RedirectHelper.ToError(this, 500, ex.Message);
        }
    }

    [HttpGet]
    [AllowAnonymous]
    public IActionResult ForgotPasswordConfirmation()
    {
        return View();
    }

    [HttpGet]
    [AllowAnonymous]
    public IActionResult ResetPassword(string code = null!)
    {
        try
        {
            if (code == null)
            {
                _logger.LogError("A code must be supplied for password reset.");
                return RedirectToAction("Error", "Home", new { statusCode = 500, exceptionMessage = "A code must be supplied for password reset." });
            }

            var model = new ResetPasswordViewModel { Code = code };
            return View(model);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while loading reset password page.");
            return RedirectHelper.ToError(this, 500, ex.Message);
        }
    }

    [HttpPost]
    [AllowAnonymous]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> ResetPassword(ResetPasswordViewModel model)
    {
        try
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            var result = await _accountService.ResetPasswordAsync(model);
            if (result)
            {
                return RedirectToAction(nameof(ResetPasswordConfirmation));
            }

            return View();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while resetting password.");
            return RedirectHelper.ToError(this, 500, ex.Message);
        }
    }

    [AllowAnonymous]
    public IActionResult ResetPasswordConfirmation()
    {
        return View();
    }


    [HttpGet]
    [AllowAnonymous]
    public IActionResult AccessDenied()
    {
        return View();
    }
}
